{"version":3,"sources":["mapDataPrep/graphDimensions.js","mapDataPrep/mapDrawFunctions.js","graphic/arrow.js","graphic/circle.js","data/countryList.js","controlPanel/countrySelect.js","graphic/capitals.js","graphic/colorByCountry.js","graphic/AlertBox.js","graphic/europeMap.js","graphic/clearArrows.js","mapDataPrep/findTradePartners.js","graphic/BarGraph.js","graphic/forceBlocksTooltip.js","graphic/forceBlocks.js","graphic/Title.js","Source.js","App.js","reportWebVitals.js","index.js"],"names":["barGraphDims","arrowHeadLength","europeProjection","d3","center","scale","translate","mapHeight","projection","drawArrowDirection","svg","origin","tradePartners","tradeFlow","arrowStart","arrowEnd","largestTradePartner","Object","keys","dest","lineWidth","lineCoords","createPathCoordinates","arrowTopCoords","orig","alphaAngle","degreeRotationBetweenCoordinates","betaAngle","degsToRags","verticalDistance","Math","sin","horizontalDistance","startingX","x2","startingY","y2","x1","y1","topArrowStartingCoordinates","arrowBottomCoords","bottomArrowStartingCoordinates","append","attr","style","transition","duration","drawArrowStem","arrowTopXDifference","arrowTopYDifference","drawArrowHeadTop","arrowBottomXDiffernce","arrowBottomYDiffernce","drawArrowHeadBottom","drawArrowParts","circleCoords","drawCircle","coordObj","yDiff","xDiff","radians","atan2","PI","origRow","destRow","capitals","filter","row","country","coordinates","longitude","latitude","deg","countryList","TradeFlowButton","props","btnType","tradeFlowToExport","tradeFlowToImport","initialLoadState","btnTypeLower","toLowerCase","clickFunction","btnId","btnText","id","className","disabled","onClick","CountrySelect","handleOriginChange","countryListSorted","sort","a","b","splice","optionsHtml","map","el","ind","document","getElementById","highlightClass","minWidth","onChange","value","removeTheseCountries","makeTheseSmaller","centroidsFiltered","centroids","includes","name","drawCapitals","selectAll","data","enter","d","text","paintCountries","colorObj","selectionCriteria","highlightSelectedCountry","setTimeout","countries","i","length","currentCountryName","countryNameForSelection","transitionCountryColors","colorByCountry","volumes","values","colorScaleFunc","domain","range","countryColorObj","currentCountry","saturationValue","parseFloat","toFixed","currentColor","AlertBox","toggleEUSelected","nonEUCountry","nonEUCountryName","alertTtext","alertStyles","top","left","backgroundColor","fontSize","width","height","position","boxShadow","borderRadius","paddingTop","visibility","marginTop","EuroMap","useState","geoMap","setGeoMap","setNonEUCountryName","originChangeFromGraphic","useEffect","fetch","then","response","json","geoData","drawMap","pathGenerator","features","countryName","properties","on","this","viewBox","orgin","clearArrowsAndCircles","arrowLines","circles","remove","findTradePartnersExport","fullTradeData","filterCriteria","firstExportRow","totalExportData","firstRowValues","firstRowKeys","zeroObject","Parnter","Partner","key","reduce","obj","fullTradeData_numbers","entries","parseInt","sortByValues","findTradePartnersImport","tradeRow","originatingCountry","tradeValue","tradeValues","Boolean","outputObj","countryCount","currentValue","currentKey","getKeyByValue","charAt","toUpperCase","slice","object","find","BarTitle","rezTitle","upDateBarTitle","BarGraph","barHeight","barMarginBetween","barStartLeft","svgHeight","euroTextXStart","tradePartnersFull","createTradeData","barData","createPortionBarData","createAbbrevData","drawCountryNames","drawAxis","xScale","createBars","reDrawBars","allCountries","allVolumes","rez","tradePartnersTop","tradeVolumes","totalTrade","topSevenCountries","push","colorValues","textData","currentTradeValue","formatTradeValue","trailingLetter","formattedValue","formatPercent","x_axis","ticks","tickFormat","call","ForceBlocksTooltip","tooltipStyles","blockHovered","isHovering","toolX","toolY","summaryDataRow","summaryData","countryNameText","keyString","newViz","tradeValueText","tradeFlowText","yPoz","xPoz","styles","ForceBlocks","setTooltipStyles","setBlockHovered","setIsHovering","generateColorObj","summaryDataSorted","countryNames","blockScale","idx","columnPx","totalColumns","generateCol","rowPx","totalRows","thisRow","floor","generateRow","thisCountryName","originForMatch","replace","console","log","x","baseVal","y","currentBlockID","_groups","attributes","nodeValue","createBlocks","originForComparison","reDrawBlocks","titleText","maxHeight","Title","setTitleText","returnTitleText","Source","setOrigin","setTradeFlow","setNonEUCountry","e","originSelected","target","maxWidth","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.99ff4718.chunk.js","sourcesContent":["let mapWidth = 700;\r\nlet mapHeight = 200;\r\n\r\nconst arrowHeadLength = 10;\r\n\r\nconst barGraphDims = {\r\n  width: 300,\r\n  height: 200,\r\n  barStartLeft: 100,\r\n  barHeight: 15,\r\n  barMarginBetween: 3,\r\n  marginTop: 30,\r\n  svgHeight: 180,\r\n  euroTextXStart: 425,\r\n};\r\n\r\nexport { mapWidth, mapHeight, arrowHeadLength, barGraphDims };\r\n\r\nexport default arrowHeadLength;\r\n","import { mapHeight, mapWidth } from \"./graphDimensions\";\r\nimport * as d3 from \"d3\";\r\n\r\nconst geoJsonUrl =\r\n  \"https://gist.githubusercontent.com/spiker830/3eab0cb407031bf9f2286f98b9d0558a/raw/7edae936285e77be675366550e20f9166bed0ed5/europe_features.json\";\r\n\r\nconst europeProjection = d3\r\n  .geoMercator()\r\n  .center([13, 52])\r\n  // .center([300, 52])\r\n  // .scale([mapWidth / 1.5])\r\n  .scale([mapWidth / 1.4])\r\n  .translate([mapWidth / 2.2, mapHeight / 5]);\r\n\r\nconst pathGenerator = d3.geoPath().projection(europeProjection);\r\n\r\nexport { geoJsonUrl, europeProjection, pathGenerator };\r\n","import { europeProjection } from \"../mapDataPrep/mapDrawFunctions\";\r\nimport * as d3 from \"d3\";\r\nimport capitals from \"../data/capitals.json\";\r\nimport arrowHeadLength from \"../mapDataPrep/graphDimensions\";\r\nimport { drawCircle } from \"./circle\";\r\n\r\nexport function drawArrowDirection(svg, origin, tradePartners, tradeFlow) {\r\n  const largestTradePartner = Object.keys(tradePartners)[0];\r\n\r\n  let arrowStart;\r\n  let arrowEnd;\r\n\r\n  if (tradeFlow === \"export\") {\r\n    arrowStart = origin;\r\n    arrowEnd = largestTradePartner;\r\n  }\r\n  if (tradeFlow === \"import\") {\r\n    arrowStart = largestTradePartner;\r\n    arrowEnd = origin;\r\n  }\r\n\r\n  if (arrowStart === \"UnitedKingdom\") {\r\n    arrowStart = \"unitedKingdom\";\r\n  }\r\n\r\n  if (arrowEnd === \"UnitedKingdom\") {\r\n    arrowEnd = \"unitedKingdom\";\r\n  }\r\n\r\n  drawArrowParts(svg, arrowStart, arrowEnd, 3);\r\n\r\n  drawCircle(svg, arrowStart);\r\n}\r\n\r\nexport function drawArrowParts(svg, origin, dest, lineWidth) {\r\n  const lineCoords = createPathCoordinates(origin, dest);\r\n\r\n\r\n  const testCoords = createPathCoordinates(\"Ireland\", \"France\");\r\n\r\n\r\n  const arrowTopCoords = topArrowStartingCoordinates(origin, dest);\r\n\r\n  const arrowBottomCoords = bottomArrowStartingCoordinates(origin, dest);\r\n\r\n  drawArrowStem(svg, lineCoords, lineWidth);\r\n  drawArrowHeadTop(svg, lineCoords, arrowTopCoords, lineWidth);\r\n  drawArrowHeadBottom(svg, lineCoords, arrowBottomCoords, lineWidth);\r\n}\r\n\r\nfunction drawArrowStem(svg, lineCoords, lineWidth) {\r\n  svg\r\n    .append(\"line\")\r\n    .attr(\"id\", \"arrowStem\")\r\n    .attr(\"class\", \"arrow\")\r\n    .attr(\"x1\", lineCoords.x1)\r\n    .attr(\"y1\", lineCoords.y1)\r\n    .attr(\"x2\", lineCoords.x1)\r\n    .attr(\"y2\", lineCoords.y1)\r\n    .style(\"stroke\", \"black\")\r\n    .style(\"stroke-width\", lineWidth)\r\n    .style(\"stroke-linecap\", \"butt\")\r\n    .transition()\r\n    .duration(2000)\r\n    .attr(\"x2\", lineCoords.x2)\r\n    .attr(\"y2\", lineCoords.y2);\r\n}\r\n\r\nfunction drawArrowHeadTop(svg, lineCoords, arrowTopCoords, lineWidth) {\r\n  let arrowTopXDifference = arrowTopCoords.x1 - lineCoords.x2;\r\n  let arrowTopYDifference = arrowTopCoords.y1 - lineCoords.y2;\r\n\r\n  let arrowAngle = degreeRotationBetweenCoordinates(lineCoords);\r\n\r\n  if (arrowAngle > 180) {\r\n    arrowTopYDifference *= -1;\r\n  }\r\n\r\n  svg\r\n    .append(\"line\")\r\n    .attr(\"id\", \"arrowHeadTop\")\r\n    .attr(\"class\", \"arrow\")\r\n    .attr(\"x1\", lineCoords.x1 + arrowTopXDifference)\r\n    .attr(\"y1\", lineCoords.y1 + arrowTopYDifference)\r\n    .attr(\"x2\", lineCoords.x1)\r\n    .attr(\"y2\", lineCoords.y1)\r\n    .style(\"stroke\", \"black\")\r\n    .style(\"stroke-width\", lineWidth)\r\n    .style(\"stroke-linecap\", \"square\")\r\n    .transition()\r\n    .duration(2000)\r\n    .attr(\"x1\", arrowTopCoords.x1)\r\n    .attr(\"y1\", arrowTopCoords.y1)\r\n    .attr(\"x2\", lineCoords.x2)\r\n    .attr(\"y2\", lineCoords.y2);\r\n}\r\n\r\nfunction drawArrowHeadBottom(svg, lineCoords, arrowBottomCoords, lineWidth) {\r\n  let arrowBottomXDiffernce = arrowBottomCoords.x1 - lineCoords.x2;\r\n  let arrowBottomYDiffernce = arrowBottomCoords.y1 - lineCoords.y2;\r\n\r\n  let arrowAngle = degreeRotationBetweenCoordinates(lineCoords);\r\n\r\n  svg\r\n    .append(\"line\")\r\n    .attr(\"id\", \"arrowHeadTop\")\r\n    .attr(\"class\", \"arrow\")\r\n    .attr(\"x1\", lineCoords.x1 + arrowBottomXDiffernce)\r\n    .attr(\"y1\", lineCoords.y1 + arrowBottomYDiffernce)\r\n    .attr(\"x2\", lineCoords.x1)\r\n    .attr(\"y2\", lineCoords.y1)\r\n    .style(\"stroke\", \"black\")\r\n    .style(\"stroke-width\", lineWidth)\r\n    .style(\"stroke-linecap\", \"square\")\r\n    .transition()\r\n    .duration(2000)\r\n    .attr(\"x1\", arrowBottomCoords.x1)\r\n    .attr(\"y1\", arrowBottomCoords.y1)\r\n    .attr(\"x2\", lineCoords.x2)\r\n    .attr(\"y2\", lineCoords.y2);\r\n}\r\n\r\nfunction topArrowStartingCoordinates(orig, dest) {\r\n  const lineCoords = createPathCoordinates(orig, dest);\r\n  let arrowAngle = degreeRotationBetweenCoordinates(lineCoords);\r\n\r\n  let alphaAngle = arrowAngle - 45;\r\n  let betaAngle = 180 - 90 - alphaAngle;\r\n\r\n  alphaAngle = degsToRags(alphaAngle);\r\n  betaAngle = degsToRags(betaAngle);\r\n\r\n  const verticalDistance = arrowHeadLength * Math.sin(alphaAngle);\r\n  const horizontalDistance = arrowHeadLength * Math.sin(betaAngle);\r\n\r\n  const startingX = lineCoords.x2 - horizontalDistance;\r\n  const startingY = lineCoords.y2 - verticalDistance;\r\n\r\n  return { x1: startingX, y1: startingY };\r\n}\r\n\r\nfunction bottomArrowStartingCoordinates(orig, dest) {\r\n  const lineCoords = createPathCoordinates(orig, dest);\r\n  const arrowAngle = degreeRotationBetweenCoordinates(lineCoords);\r\n\r\n  let alphaAngle = arrowAngle + 45;\r\n  let betaAngle = 180 - 90 - alphaAngle;\r\n\r\n  alphaAngle = degsToRags(alphaAngle);\r\n  betaAngle = degsToRags(betaAngle);\r\n\r\n  const verticalDistance = arrowHeadLength * Math.sin(alphaAngle);\r\n  const horizontalDistance = arrowHeadLength * Math.sin(betaAngle);\r\n\r\n  const startingX = lineCoords.x2 - horizontalDistance;\r\n  const startingY = lineCoords.y2 - verticalDistance;\r\n\r\n  return { x1: startingX, y1: startingY };\r\n}\r\n\r\nfunction degreeRotationBetweenCoordinates(coordObj) {\r\n  const yDiff = coordObj.y2 - coordObj.y1;\r\n  const xDiff = coordObj.x2 - coordObj.x1;\r\n\r\n  const radians = Math.atan2(yDiff, xDiff);\r\n\r\n  return radsToDegs(radians);\r\n}\r\n\r\nexport function createPathCoordinates(origRow, destRow) {\r\n  origRow = capitals.filter((row) => row.country === origRow);\r\n  destRow = capitals.filter((row) => row.country === destRow);\r\n\r\n  origRow = origRow[0];\r\n  destRow = destRow[0];\r\n\r\n  if (typeof origRow === \"undefined\") {\r\n    return null;\r\n  }\r\n\r\n  let coordinates = {};\r\n\r\n  coordinates[\"x1\"] = europeProjection([\r\n    origRow.longitude,\r\n    origRow.latitude,\r\n  ])[0];\r\n  coordinates[\"y1\"] = europeProjection([\r\n    origRow.longitude,\r\n    origRow.latitude,\r\n  ])[1];\r\n  coordinates[\"x2\"] = europeProjection([\r\n    destRow.longitude,\r\n    destRow.latitude,\r\n  ])[0];\r\n  coordinates[\"y2\"] = europeProjection([\r\n    destRow.longitude,\r\n    destRow.latitude,\r\n  ])[1];\r\n\r\n  return coordinates;\r\n}\r\n\r\nfunction radsToDegs(rad) {\r\n  return (rad * 180) / Math.PI;\r\n}\r\n\r\nfunction degsToRags(deg) {\r\n  return (deg * Math.PI) / 180.0;\r\n}\r\n\r\nexport default drawArrowDirection;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport * as d3 from \"d3\";\r\n\r\nimport { createPathCoordinates } from \"./arrow\";\r\n\r\nexport function drawCircle(svg, arrowStart) {\r\n  const circleCoords = createPathCoordinates(arrowStart, \"Germany\");\r\n\r\n  svg\r\n    .append(\"circle\")\r\n    .attr(\"id\", \"arrowStartCircle\")\r\n    .attr(\"class\", \"startingCircle\")\r\n    .attr(\"cx\", circleCoords.x1)\r\n    .attr(\"cy\", circleCoords.y1)\r\n    .attr(\"r\", 0)\r\n    .attr(\"stroke-width\", 0)\r\n    .transition()\r\n    .duration(1000)\r\n    .attr(\"r\", 7)\r\n    .attr(\"stroke-width\", 2)\r\n    .attr(\"stroke\", \"black\")\r\n    .attr(\"fill\", \"white\");\r\n}\r\n","const countryList = [\r\n  \"Belgium\",\r\n  \"Bulgaria\",\r\n  \"Czechia\",\r\n  \"Germany\",\r\n  \"Denmark\",\r\n  \"Estonia\",\r\n  \"Spain\",\r\n  \"Finland\",\r\n  \"France\",\r\n  \"United\",\r\n  \"Greece\",\r\n  \"Hungary\",\r\n  \"Italy\",\r\n  \"Lithuania\",\r\n  \"Luxembourg\",\r\n  \"Latvia\",\r\n  \"Netherlands\",\r\n  \"Poland\",\r\n  \"Portugal\",\r\n  \"Romania\",\r\n  \"Slovenia\",\r\n  \"Slovakia\",\r\n  \"Sweden\",\r\n  \"Austria\",\r\n  \"Croatia\",\r\n  \"Ireland\",\r\n  \"unitedKingdom\",\r\n  \"United Kingdom\",\r\n];\r\n\r\nexport default countryList;\r\n","import countryList from \"../data/countryList\";\r\nimport React from \"react\";\r\n\r\nconst CountrySelect = (props) => {\r\n  const {\r\n    handleOriginChange,\r\n    origin,\r\n    tradeFlow,\r\n    tradeFlowToExport,\r\n    tradeFlowToImport,\r\n  } = props;\r\n\r\n  const countryListSorted = countryList.sort((a, b) => (a > b ? 1 : -1));\r\n\r\n  countryListSorted.splice(-1, 1, \"United Kingdom\");\r\n\r\n  const optionsHtml = countryListSorted.map((el, ind) => (\r\n    <option key={ind}>{el}</option>\r\n  ));\r\n\r\n  const originSelect = document.getElementById(\"originSelect\");\r\n\r\n  const initialLoadState = origin ? false : true;\r\n\r\n  const highlightClass = initialLoadState ? \"highlightSelect\" : \"none\";\r\n\r\n  return (\r\n    <div id=\"countrySelectContainer\" style={{ minWidth: 500 }}>\r\n      <h3> Change Country Selected </h3>\r\n      <select\r\n        id=\"originSelect\"\r\n        className={highlightClass}\r\n        onChange={handleOriginChange}\r\n        value={origin}\r\n      >\r\n        {optionsHtml}\r\n      </select>\r\n\r\n      <TradeFlowButton\r\n        btnType=\"Import\"\r\n        tradeFlow={tradeFlow}\r\n        tradeFlowToExport={tradeFlowToExport}\r\n        tradeFlowToImport={tradeFlowToImport}\r\n        initialLoadState={initialLoadState}\r\n      />\r\n\r\n      <TradeFlowButton\r\n        btnType=\"Export\"\r\n        tradeFlow={tradeFlow}\r\n        tradeFlowToExport={tradeFlowToExport}\r\n        tradeFlowToImport={tradeFlowToImport}\r\n        initialLoadState={initialLoadState}\r\n      />\r\n      {/* <div className={highlightClass}></div> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst TradeFlowButton = (props) => {\r\n  const {\r\n    btnType,\r\n    tradeFlow,\r\n    tradeFlowToExport,\r\n    tradeFlowToImport,\r\n    initialLoadState,\r\n  } = props;\r\n\r\n  const btnTypeLower = btnType.toLowerCase();\r\n\r\n  const clickFunction =\r\n    btnType === \"Import\" ? tradeFlowToImport : tradeFlowToExport;\r\n\r\n  let btnId = tradeFlow === btnTypeLower ? \"activeBtn\" : \"passiveBtn\";\r\n\r\n  if (initialLoadState) {\r\n    btnId = \"passiveBtn\";\r\n  }\r\n\r\n  const btnText =\r\n    tradeFlow === btnTypeLower\r\n      ? `Currently Showing ${btnType}s`\r\n      : `Show ${btnType}s Instead`;\r\n\r\n  return (\r\n    <button\r\n      id={btnId}\r\n      className=\"tradeFlowBtn\"\r\n      disabled={initialLoadState}\r\n      onClick={clickFunction}\r\n    >\r\n      {btnText}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default CountrySelect;\r\n","import capitals from \"../data/capitals.json\";\r\nimport countryList from \"../data/countryList\";\r\n\r\nimport centroids from \"../data/centroids.json\";\r\n\r\nimport { europeProjection } from \"../mapDataPrep/mapDrawFunctions\";\r\n\r\nconst removeTheseCountries = [\r\n  \"Albania\",\r\n  \"Macedonia\",\r\n  \"Malta\",\r\n  \"Cyprus\",\r\n  \"Maldova\",\r\n  \"Luxembourg\",\r\n  \"Slovenia\",\r\n  \"Moldova\",\r\n  \"Switzerland\",\r\n  \"Denmark\",\r\n  \"Belgium\",\r\n];\r\n\r\nconst makeTheseSmaller = [\r\n  \"Portugal\",\r\n  \"Switzerland\",\r\n  \"Bosnia\",\r\n  \"Denmark\",\r\n  \"unitedKingdom\",\r\n  \"Belgium\",\r\n  \"Croatia\",\r\n  \"Netherlands\",\r\n];\r\n\r\nconst boldThese = [\"Greece\", \"Portugal\"];\r\n\r\nconst centroidsFiltered = centroids.filter(\r\n  (row) => !removeTheseCountries.includes(row.name)\r\n);\r\n\r\nexport function drawCapitals(svg) {\r\n  svg\r\n    .selectAll(\"text\")\r\n    .data(centroidsFiltered)\r\n    .enter()\r\n    .append(\"text\")\r\n    .attr(\"x\", function (d) {\r\n      return europeProjection([d.longitude, d.latitude])[0];\r\n    })\r\n    .attr(\"y\", function (d) {\r\n      return europeProjection([d.longitude, d.latitude])[1];\r\n    })\r\n    .text((d) => {\r\n      if (d.name === \"unitedKingdom\") {\r\n        return \"United Kingdom\";\r\n      }\r\n      return d.name;\r\n    })\r\n    .style(\"font-size\", (d) => {\r\n      if (makeTheseSmaller.includes(d.name)) {\r\n        return \"6.5px\";\r\n      } else {\r\n        return \"8px\";\r\n      }\r\n    })\r\n    .attr(\"text-anchor\", \"middle\");\r\n}\r\n\r\nexport default drawCapitals;\r\n","import * as d3 from \"d3\";\r\n\r\nexport function paintCountries(colorObj, origin) {\r\n  restoreDefaultColor();\r\n\r\n  highlightSelectedCountry(origin);\r\n  transitionCountryColors(colorObj);\r\n}\r\n\r\nfunction highlightSelectedCountry(origin) {\r\n  let selectionCriteria = origin;\r\n\r\n  if (\r\n    selectionCriteria === \"United Kingdom\" ||\r\n    selectionCriteria === \"UnitedKingdom\"\r\n  ) {\r\n    selectionCriteria = \"unitedKingdom\";\r\n  }\r\n\r\n  d3.select(`#${selectionCriteria}`)\r\n    .transition()\r\n    .duration(1500)\r\n    .attr(\"fill\", \"green\");\r\n}\r\n\r\nfunction transitionCountryColors(colorObj) {\r\n  setTimeout(() => {\r\n    const countries = Object.keys(colorObj);\r\n\r\n    for (let i = 0; i < countries.length; i++) {\r\n      let currentCountryName = countries[i];\r\n\r\n      let countryNameForSelection = currentCountryName;\r\n\r\n      if (countryNameForSelection === \"UnitedKingdom\") {\r\n        countryNameForSelection = \"unitedKingdom\";\r\n      }\r\n\r\n      const selectedCountry = d3.select(`#${countryNameForSelection}`);\r\n\r\n      selectedCountry\r\n        .transition()\r\n        .duration(1500)\r\n        .attr(\"fill\", colorObj[currentCountryName]);\r\n    }\r\n  }, 900);\r\n}\r\n\r\nexport function colorByCountry(tradePartners) {\r\n  const volumes = Object.values(tradePartners);\r\n  const countries = Object.keys(tradePartners);\r\n\r\n  const colorScaleFunc = d3\r\n    .scaleLinear()\r\n    .domain([d3.min(volumes), d3.max(volumes)])\r\n    .range([0, 100]);\r\n\r\n  let countryColorObj = {};\r\n\r\n  for (let i = 0; i < countries.length; i++) {\r\n    const currentCountry = countries[i];\r\n    const currenVolume = volumes[i];\r\n\r\n    let saturationValue = colorScaleFunc(currenVolume);\r\n    saturationValue = parseFloat(saturationValue).toFixed(0);\r\n    const currentColor = `hsla(186, ${saturationValue}%, 50%, 1)`;\r\n\r\n    countryColorObj[currentCountry] = currentColor;\r\n  }\r\n\r\n  return countryColorObj;\r\n}\r\n\r\nfunction restoreDefaultColor() {\r\n  d3.selectAll(\".countryPath\").transition().duration(1000).attr(\"fill\", \"grey\");\r\n}\r\n\r\nexport default colorByCountry;\r\n","export const AlertBox = (props) => {\r\n  const { toggleEUSelected, nonEUCountry, nonEUCountryName } = props;\r\n\r\n  const alertTtext = `No Data! ${nonEUCountryName} is not in the EU`;\r\n\r\n  let alertStyles = {\r\n    top: \"-38em\",\r\n    left: \"30em\",\r\n    backgroundColor: \"#d12e6a\",\r\n    fontSize: \"1.1em\",\r\n    width: \"300px\",\r\n    height: \"100px\",\r\n    position: \"relative\",\r\n    boxShadow: \".2em .4em black\",\r\n    borderRadius: \"1em\",\r\n    paddingTop: \"2rem\",\r\n    visibility: \"hidden\",\r\n  };\r\n\r\n  if (nonEUCountry) {\r\n    alertStyles.visibility = \"visible\";\r\n  } else {\r\n    alertStyles.visibility = \"hidden\";\r\n  }\r\n\r\n  return (\r\n    <div style={alertStyles}>\r\n      {alertTtext}\r\n\r\n      <br />\r\n\r\n      <button\r\n        style={{\r\n          width: \"75px\",\r\n          height: \"30px\",\r\n          fontSize: \"1em\",\r\n          marginTop: \"2rem\",\r\n          borderRadius: \".5em\",\r\n        }}\r\n        onClick={() => toggleEUSelected()}\r\n      >\r\n        Okay\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AlertBox;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport { geoJsonUrl, europeProjection } from \"../mapDataPrep/mapDrawFunctions\";\r\nimport drawCapitals from \"./capitals\";\r\nimport colorByCountry, { paintCountries } from \"./colorByCountry\";\r\nimport AlertBox from \"./AlertBox\";\r\n\r\nconst EuroMap = (props) => {\r\n  const [geoMap, setGeoMap] = useState({});\r\n  const [nonEUCountryName, setNonEUCountryName] = useState(\"\");\r\n\r\n  const { originChangeFromGraphic, origin, toggleEUSelected, nonEUCountry } =\r\n    props;\r\n\r\n  //   draw map functions\r\n  useEffect(() => {\r\n    fetch(geoJsonUrl).then((response) => {\r\n      response.json().then((geoData) => {\r\n        setGeoMap(geoData);\r\n        drawMap(geoData);\r\n      });\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    drawMap(geoMap);\r\n    drawCapitals(svg);\r\n  }, [geoMap]);\r\n\r\n  useEffect(() => {\r\n    drawCapitals(svg);\r\n  }, []);\r\n\r\n  const svg = d3.select(\"#europeMap\");\r\n\r\n  function drawMap(geoData) {\r\n    let pathGenerator = d3.geoPath().projection(europeProjection);\r\n\r\n    svg\r\n      .selectAll(\"path\")\r\n      .data(geoData.features)\r\n      .enter()\r\n      .append(\"path\")\r\n      .attr(\"d\", pathGenerator)\r\n      .attr(\"stroke\", \"black\")\r\n      .attr(\"class\", \"countryPath\")\r\n      .attr(\"id\", function (d) {\r\n        const countryName = d.properties.name;\r\n        if (countryName === \"Czech Republic\") {\r\n          return \"Czechia\";\r\n        }\r\n        if (countryName === \"United Kingdom\") {\r\n          return \"unitedKingdom\";\r\n        } else {\r\n          return countryName;\r\n        }\r\n      })\r\n      .attr(\"fill\", \"hsl(186, 0%, 50%)\");\r\n\r\n    const countries = d3.selectAll(\".countryPath\");\r\n\r\n    countries.on(\"click\", function () {\r\n      originChangeFromGraphic(this.id);\r\n      setNonEUCountryName(this.id);\r\n    });\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <svg id=\"europeMap\" viewBox=\"0 -100 700 450\"></svg>\r\n\r\n      <AlertBox\r\n        orgin={origin}\r\n        toggleEUSelected={toggleEUSelected}\r\n        nonEUCountry={nonEUCountry}\r\n        nonEUCountryName={nonEUCountryName}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EuroMap;\r\n","import * as d3 from \"d3\";\r\n\r\nexport function clearArrowsAndCircles() {\r\n  const arrowLines = d3.selectAll(\".arrow\");\r\n  const circles = d3.selectAll(\".startingCircle\");\r\n\r\n  arrowLines.transition().duration(800).style(\"opacity\", 0);\r\n  circles.transition().duration(800).style(\"opacity\", 0);\r\n\r\n  setTimeout(() => {\r\n    arrowLines.remove();\r\n    circles.remove();\r\n  }, 1100);\r\n}\r\n\r\nexport default clearArrowsAndCircles;\r\n","import { filter } from \"d3-array\";\r\nimport totalExportData from \"../data/totalExportData.json\";\r\n\r\nexport function findTradePartnersExport(origin) {\r\n  let fullTradeData;\r\n\r\n  let filterCriteria;\r\n\r\n  if (origin === \"\") {\r\n    const firstExportRow = totalExportData[0];\r\n    const firstRowValues = Object.values(firstExportRow);\r\n    const firstRowKeys = Object.keys(firstExportRow);\r\n\r\n    let zeroObject = { Parnter: \"austria\" };\r\n\r\n    for (let i = 1; i < firstRowValues.length; i++) {\r\n      zeroObject[firstRowKeys[i]] = 0;\r\n    }\r\n\r\n    return zeroObject;\r\n  }\r\n\r\n  if (origin === \"UnitedKingdom\" || origin === \"unitedKingdom\") {\r\n    filterCriteria = \"unitedKingdom\";\r\n  } else {\r\n    filterCriteria = origin.toLowerCase();\r\n  }\r\n\r\n  fullTradeData = totalExportData.filter(\r\n    (row) => row.Partner === filterCriteria\r\n  );\r\n\r\n  fullTradeData = fullTradeData[0];\r\n\r\n  fullTradeData[\"Partner\"] = filterCriteria;\r\n\r\n  fullTradeData = Object.keys(fullTradeData)\r\n    .filter((key) => key !== \"european\")\r\n    .reduce((obj, key) => {\r\n      obj[key] = fullTradeData[key];\r\n      return obj;\r\n    }, {});\r\n\r\n  let fullTradeData_numbers = {};\r\n\r\n  for (let [key, value] of Object.entries(fullTradeData)) {\r\n    value = parseInt(value);\r\n\r\n    fullTradeData_numbers[key] = value;\r\n  }\r\n\r\n  const fullTradeData_final = sortByValues(fullTradeData_numbers);\r\n\r\n  return fullTradeData_final;\r\n}\r\n\r\nexport function findTradePartnersImport(origin) {\r\n  let fullTradeData = {};\r\n\r\n  let filterCriteria;\r\n  if (origin === \"UnitedKingdom\" || origin === \"unitedKingdom\") {\r\n    filterCriteria = \"unitedKingdom\";\r\n  } else {\r\n    filterCriteria = origin.toLowerCase();\r\n  }\r\n\r\n  for (let i = 0; i < totalExportData.length; i++) {\r\n    const tradeRow = totalExportData[i];\r\n\r\n    const originatingCountry = tradeRow.Partner;\r\n\r\n    const tradeValue = tradeRow[filterCriteria];\r\n\r\n    fullTradeData[originatingCountry] = tradeValue;\r\n  }\r\n\r\n  fullTradeData[\"Partner\"] = filterCriteria;\r\n\r\n  const fullTradeData_final = sortByValues(fullTradeData);\r\n\r\n  return fullTradeData_final;\r\n}\r\n\r\nfunction sortByValues(obj) {\r\n  const tradeValues = Object.values(obj)\r\n    .sort((a, b) => (a > b ? -1 : 1))\r\n    .filter(Boolean);\r\n\r\n  let outputObj = {};\r\n\r\n  const countryCount = Object.keys(obj).length - 2;\r\n\r\n  for (let i = 0; i < countryCount; i++) {\r\n    const currentValue = tradeValues[i];\r\n\r\n    let currentKey = getKeyByValue(obj, currentValue);\r\n\r\n    if (currentKey) {\r\n      currentKey = currentKey.charAt(0).toUpperCase() + currentKey.slice(1);\r\n\r\n      // if (currentKey === \"unitedKingdom\") {\r\n      if (currentKey === \"United Kingdom\") {\r\n        currentKey = \"unitedKingdom\";\r\n      }\r\n\r\n      outputObj[currentKey] = currentValue;\r\n    }\r\n  }\r\n  return outputObj;\r\n}\r\n\r\nfunction getKeyByValue(object, value) {\r\n  return Object.keys(object).find((key) => object[key] === value);\r\n}\r\n\r\nexport default findTradePartnersExport;\r\n","import * as d3 from \"d3\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { barGraphDims } from \"../mapDataPrep/graphDimensions\";\r\nimport {\r\n  findTradePartnersExport,\r\n  findTradePartnersImport,\r\n} from \"../mapDataPrep/findTradePartners\";\r\n\r\nimport { colorByCountry } from \"./colorByCountry\";\r\n\r\nexport function BarGraph(props) {\r\n  const { origin, tradeFlow } = props;\r\n\r\n  const {\r\n    height,\r\n    width,\r\n    barHeight,\r\n    barMarginBetween,\r\n    marginTop,\r\n    barStartLeft,\r\n    svgHeight,\r\n    euroTextXStart,\r\n  } = barGraphDims;\r\n\r\n  useEffect(() => {\r\n    const tradePartnersFull = createTradeData(origin, tradeFlow);\r\n    const tradePartnersTop = createAbbrevData(tradePartnersFull);\r\n    const barData = createPortionBarData(tradePartnersTop);\r\n    drawCountryNames(tradePartnersFull, origin);\r\n    drawAxis();\r\n    createBars(barData);\r\n    reDrawBars(barData, tradePartnersFull, origin);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const tradePartnersFull = createTradeData(origin, tradeFlow);\r\n    const tradePartnersTop = createAbbrevData(tradePartnersFull);\r\n\r\n    const barData = createPortionBarData(tradePartnersTop);\r\n\r\n    drawAxis();\r\n    drawCountryNames(tradePartnersFull, origin);\r\n    reDrawBars(barData, tradePartnersFull, origin);\r\n  }, [origin, tradeFlow]);\r\n\r\n  // global stuffs\r\n  const svg = d3.select(\"#graphSvg\");\r\n\r\n  const xScale = d3.scaleLinear().domain([0, 0.6]).range([0, width]);\r\n\r\n  // call deez\r\n\r\n  function createAbbrevData(tradePartnersFull) {\r\n    const allCountries = Object.keys(tradePartnersFull);\r\n    const allVolumes = Object.values(tradePartnersFull);\r\n\r\n    let rez = {};\r\n\r\n    for (let i = 0; i < 7; i++) {\r\n      rez[allCountries[i]] = allVolumes[i];\r\n    }\r\n\r\n    return rez;\r\n  }\r\n\r\n  function createPortionBarData(tradePartnersTop) {\r\n    const tradeVolumes = Object.values(tradePartnersTop);\r\n    const totalTrade = tradeVolumes.reduce((a, b) => a + b, 0);\r\n\r\n    const unroundedData = tradeVolumes.map((el) => el / totalTrade);\r\n\r\n    const portionBarData = unroundedData.map((el) => parseFloat(el.toFixed(3)));\r\n\r\n    return portionBarData;\r\n  }\r\n\r\n  function createTradeData(origin, tradeFlow) {\r\n    let tradePartnersFull =\r\n      tradeFlow === \"export\"\r\n        ? findTradePartnersExport(origin)\r\n        : findTradePartnersImport(origin);\r\n\r\n    return tradePartnersFull;\r\n  }\r\n\r\n  function drawCountryNames(tradePartnersFull, origin) {\r\n    d3.selectAll(\".barLabels\").remove();\r\n\r\n    const allCountries = Object.keys(tradePartnersFull);\r\n\r\n    let topSevenCountries = [];\r\n\r\n    for (let i = 0; i < 7; i++) {\r\n      let currentCountry = allCountries[i];\r\n      if (currentCountry === \"UnitedKingdom\") {\r\n        currentCountry = \"U.K.\";\r\n      }\r\n\r\n      topSevenCountries.push(currentCountry);\r\n    }\r\n\r\n    let svg = d3.select(\"#graphSvg\");\r\n\r\n    svg\r\n      .selectAll(\".barLabels\")\r\n      .data(topSevenCountries)\r\n      .enter()\r\n      .append(\"text\")\r\n      .text((d) => {\r\n        if (origin) {\r\n          return d;\r\n        } else {\r\n          return \"\";\r\n        }\r\n      })\r\n      .attr(\"x\", 10)\r\n      .attr(\"y\", (d, i) => i * (barHeight + barMarginBetween) + marginTop + 10)\r\n      .attr(\"class\", \"barLabels\")\r\n      .attr(\"stroke\", \"white\")\r\n      .attr(\"font-weight\", 15);\r\n  }\r\n\r\n  function reDrawBars(barData, tradePartnersFull, origin) {\r\n    const colorObj = colorByCountry(tradePartnersFull);\r\n\r\n    const colorValues = Object.values(colorObj);\r\n\r\n    svg\r\n      .selectAll(\".bar\")\r\n      .data(barData)\r\n      .enter()\r\n      .append(\"rect\")\r\n      .attr(\"x\", barStartLeft)\r\n      .attr(\"y\", (d, i) => i * (barHeight + barMarginBetween) + marginTop)\r\n      .attr(\"height\", barHeight)\r\n      .attr(\"class\", \"bar\");\r\n\r\n    d3.selectAll(\".bar\")\r\n      .transition()\r\n      .duration(1500)\r\n      .attr(\"width\", (d) => {\r\n        return xScale(d);\r\n      })\r\n      .attr(\"fill\", (d, i) => {\r\n        return colorValues[i];\r\n      });\r\n\r\n    const textData = [\"Euros\"];\r\n\r\n    for (let i = 0; i < 7; i++) {\r\n      const currentTradeValue = Object.values(tradePartnersFull)[i];\r\n\r\n      textData.push(formatTradeValue(currentTradeValue));\r\n    }\r\n\r\n    d3.selectAll(\".dataTable\").remove();\r\n\r\n    svg\r\n      .selectAll(\".dataTable\")\r\n      .data(textData)\r\n      .enter()\r\n      .append(\"text\")\r\n      .attr(\"x\", euroTextXStart)\r\n      .attr(\"y\", (d, i) => i * (barHeight + barMarginBetween) + 22)\r\n      .text((d) => {\r\n        if (origin) {\r\n          return d;\r\n        } else {\r\n          return \"\";\r\n        }\r\n      })\r\n      .attr(\"class\", \"dataTable\")\r\n      .attr(\"stroke\", \"white\")\r\n      .attr(\"font-weight\", 15);\r\n  }\r\n\r\n  function formatTradeValue(tradeValue) {\r\n    let formattedValue = tradeValue / 1000000000;\r\n    let trailingLetter;\r\n\r\n    if (formattedValue > 1) {\r\n      trailingLetter = \"B\";\r\n    } else {\r\n      formattedValue = tradeValue / 1000000;\r\n      trailingLetter = \"M\";\r\n    }\r\n\r\n    formattedValue = formattedValue.toFixed(1);\r\n\r\n    return `${formattedValue}${trailingLetter}`;\r\n  }\r\n\r\n  function createBars(barData) {\r\n    const svg = d3.select(\"#graphSvg\");\r\n\r\n    svg\r\n      .selectAll(\".bar\")\r\n      .data(barData)\r\n      .enter()\r\n      .append(\"rect\")\r\n      .attr(\"x\", barStartLeft)\r\n      .attr(\"y\", (d, i) => i * (barHeight + barMarginBetween) + marginTop)\r\n      .attr(\"width\", (d) => {\r\n        return xScale(d);\r\n      })\r\n      .attr(\"height\", barHeight)\r\n      .attr(\"class\", \"bar\");\r\n  }\r\n\r\n  function drawAxis() {\r\n    const svg = d3.select(\"#graphSvg\");\r\n\r\n    d3.select(\"#barGraphAxis\").remove();\r\n\r\n    const axisData = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6];\r\n\r\n    const formatPercent = d3.format(\".0%\");\r\n\r\n    const x_axis = d3\r\n      .axisBottom()\r\n      .scale(xScale)\r\n      .ticks(6)\r\n      .tickFormat(formatPercent);\r\n\r\n    svg\r\n      .append(\"g\")\r\n      // .attr(\"transform\", `translate (${barStartLeft}, ${marginTop - 20})`)\r\n      .attr(\"transform\", `translate (${barStartLeft}, ${160})`)\r\n      .attr(\"id\", \"barGraphAxis\")\r\n      .call(x_axis);\r\n  }\r\n\r\n  return (\r\n    <div style={{ width: \"550px\" }}>\r\n      <h2 id=\"barGraphTitle\"></h2>\r\n      <BarTitle origin={origin} tradeFlow={tradeFlow} />\r\n      <svg\r\n        id=\"graphSvg\"\r\n        height={svgHeight}\r\n        // width={550}\r\n        // width=\"550px\"\r\n      ></svg>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction BarTitle(props) {\r\n  const { origin, tradeFlow } = props;\r\n\r\n  function upDateBarTitle(origin, tradeFlow) {\r\n    let rezTitle;\r\n    if (tradeFlow === \"export\") {\r\n      rezTitle = `${origin} Exports to`;\r\n    }\r\n\r\n    if (tradeFlow === \"import\") {\r\n      rezTitle = `${origin} Imports from`;\r\n    }\r\n\r\n    return rezTitle;\r\n  }\r\n\r\n  return <h4>{upDateBarTitle(origin, tradeFlow)}</h4>;\r\n}\r\n\r\nexport default BarGraph;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport summaryData from \"../data/summaryData.json\";\r\n\r\nexport const ForceBlocksTooltip = (props) => {\r\n  const { tooltipStyles, blockHovered, tradeFlow, isHovering } = props;\r\n\r\n  let { toolX, toolY, visibility } = tooltipStyles;\r\n\r\n  if (!isHovering) {\r\n    return <></>;\r\n  }\r\n\r\n  toolY += 310;\r\n\r\n  let countryName = blockHovered.slice(0, -5).toLowerCase();\r\n\r\n  if (countryName === \"unitedkingdom\") {\r\n    countryName = \"unitedKingdom\";\r\n  }\r\n\r\n  let summaryDataRow = summaryData.filter((row) => row.Partner === countryName);\r\n\r\n  const countryNameText =\r\n    countryName.charAt(0).toUpperCase() + countryName.slice(1);\r\n\r\n  const keyString =\r\n    tradeFlow === \"import\" ? \"countryTotalImports\" : \"countryTotalExports\";\r\n  summaryDataRow = summaryDataRow[0];\r\n\r\n  let tradeValue;\r\n\r\n  if (summaryDataRow) {\r\n    tradeValue = summaryDataRow[keyString];\r\n  }\r\n\r\n  function formatTradeValue(tradeValue) {\r\n    let formattedValue = tradeValue / 1000000000;\r\n    let trailingLetter;\r\n\r\n    if (formattedValue > 1) {\r\n      trailingLetter = \"B\";\r\n    } else {\r\n      formattedValue = tradeValue / 1000000;\r\n      trailingLetter = \"M\";\r\n    }\r\n\r\n    formattedValue = formattedValue.toFixed(1);\r\n\r\n    return `${formattedValue}${trailingLetter}`;\r\n  }\r\n\r\n  const tradeValueText = formatTradeValue(tradeValue);\r\n\r\n  const tradeFlowText =\r\n    tradeFlow.charAt(0).toUpperCase() + tradeFlow.slice(1) + \"s\";\r\n\r\n  const yOffset = 220;\r\n  const xOffset = 100;\r\n\r\n  const yPoz = toolY + yOffset;\r\n  const xPoz = toolX + xOffset;\r\n\r\n  let newViz;\r\n\r\n  if (!toolX) {\r\n    newViz = \"hidden\";\r\n  } else {\r\n    newViz = visibility;\r\n  }\r\n\r\n  let blockSelection;\r\n  if (blockHovered) {\r\n    blockSelection = d3.select(`#${blockHovered}`);\r\n  }\r\n\r\n  const styles = {\r\n    top: yPoz,\r\n    left: xPoz,\r\n    width: \"125px\",\r\n    visibility: newViz,\r\n    position: \"absolute\",\r\n  };\r\n\r\n  return (\r\n    <div id=\"forceTooltip\" style={styles}>\r\n      <span>{countryNameText}</span>\r\n      <br />\r\n      <span>{tradeFlowText} </span>\r\n      <br />\r\n      <span>{tradeValueText}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ForceBlocksTooltip;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport summaryData from \"../data/summaryData.json\";\r\n\r\nimport {\r\n  findTradePartnersExport,\r\n  findTradePartnersImport,\r\n} from \"../mapDataPrep/findTradePartners\";\r\n\r\nimport { colorByCountry } from \"./colorByCountry\";\r\n\r\nimport ForceBlocksTooltip from \"./forceBlocksTooltip\";\r\n\r\nexport function ForceBlocks(props) {\r\n  const { origin, tradeFlow, originChangeFromGraphic } = props;\r\n\r\n  const [tooltipStyles, setTooltipStyles] = useState({});\r\n  const [blockHovered, setBlockHovered] = useState(\"\");\r\n  const [isHovering, setIsHovering] = useState(false);\r\n\r\n  useEffect(() => {\r\n    createBlocks(tradeFlow);\r\n    reDrawBlocks(tradeFlow);\r\n  }, [origin, tradeFlow]);\r\n\r\n  function generateRow(idx) {\r\n    let rowPx = 45;\r\n    let totalRows = 5;\r\n    let thisRow = 3;\r\n\r\n    if (idx > 9 && idx <= 14) {\r\n      rowPx = 35;\r\n      thisRow = 2;\r\n      return thisRow * rowPx;\r\n    }\r\n\r\n    if (idx > 14) {\r\n      rowPx = 30;\r\n      return thisRow * rowPx;\r\n    }\r\n\r\n    return Math.floor(idx / totalRows) * rowPx;\r\n  }\r\n\r\n  function generateCol(idx) {\r\n    let columnPx = 50;\r\n    let totalColumns = 5;\r\n\r\n    if (idx > 14) {\r\n      totalColumns = 20;\r\n      columnPx = 20;\r\n      return (idx - 15) * columnPx + 27;\r\n    }\r\n\r\n    return (idx % totalColumns) * columnPx + 25;\r\n  }\r\n\r\n  function createBlocks(tradeFlow) {\r\n    const svg = d3.select(\"#blockSvg\");\r\n\r\n    const keyString =\r\n      tradeFlow === \"import\" ? \"countryTotalImports\" : \"countryTotalExports\";\r\n\r\n    const summaryDataSorted = summaryData.sort(\r\n      (a, b) => b[keyString] - a[keyString]\r\n    );\r\n\r\n    const tradeVolumes = summaryDataSorted.map((row) => row[keyString]);\r\n\r\n    let countryNames = summaryDataSorted.map((row) => row.Partner);\r\n\r\n    countryNames = countryNames.map(\r\n      (el) => el.charAt(0).toUpperCase() + el.slice(1)\r\n    );\r\n\r\n    const colorObj = generateColorObj(tradeFlow, origin);\r\n\r\n    const blockScale = d3\r\n      .scaleLinear()\r\n      .domain([0, d3.max(tradeVolumes)])\r\n      .range([7, 40]);\r\n\r\n    svg\r\n      .selectAll(\".block\")\r\n      .data(tradeVolumes)\r\n      .enter()\r\n      .append(\"rect\")\r\n      .attr(\"x\", (d, i) => {\r\n        return generateCol(i);\r\n      })\r\n      .attr(\"y\", (d, i) => {\r\n        return generateRow(i);\r\n      })\r\n      .attr(\"width\", (d) => {\r\n        return blockScale(d);\r\n      })\r\n      .attr(\"height\", (d) => {\r\n        return blockScale(d);\r\n      })\r\n      .attr(\"fill\", (d, i) => {\r\n        const thisCountryName = countryNames[i];\r\n\r\n        const originForMatch = origin.toLowerCase();\r\n\r\n        if (originForMatch === \"unitedkingdom\") {\r\n          originForMatch = \"unitedKingdom\";\r\n        }\r\n\r\n        if (originForMatch === thisCountryName) {\r\n          return \"green\";\r\n        }\r\n\r\n        return colorObj[thisCountryName];\r\n      })\r\n      .attr(\"class\", \"block\")\r\n      .attr(\"id\", (d, i) => `${countryNames[i]}Block`)\r\n      .on(\"click\", function () {\r\n        const thisId = this.id;\r\n        let countryName = thisId.replace(\"Block\", \"\");\r\n\r\n        if (countryName === \"UnitedKingdom\") {\r\n          countryName = \"unitedKingdom\";\r\n        }\r\n\r\n        console.log(\"fc blocks\", countryName);\r\n\r\n        originChangeFromGraphic(countryName);\r\n      })\r\n      .on(\"mouseover\", function () {\r\n        setTooltipStyles({\r\n          ...tooltipStyles,\r\n          toolX: this.x.baseVal.value,\r\n          toolY: this.y.baseVal.value,\r\n          visibility: \"visible\",\r\n        });\r\n\r\n        const currentBlock = d3.select(this);\r\n        let currentBlockID = currentBlock._groups[0][0].attributes.id.nodeValue;\r\n        setIsHovering(true);\r\n        setBlockHovered(currentBlockID);\r\n      })\r\n      .on(\"mouseout\", () => {\r\n        setTooltipStyles({\r\n          ...tooltipStyles,\r\n          visibility: \"hidden\",\r\n        });\r\n\r\n        setBlockHovered(\"\");\r\n        setIsHovering(false);\r\n      });\r\n  }\r\n\r\n  function reDrawBlocks(tradeFlow) {\r\n    const keyString =\r\n      tradeFlow === \"import\" ? \"countryTotalImports\" : \"countryTotalExports\";\r\n\r\n    const summaryDataSorted = summaryData.sort(\r\n      (a, b) => b[keyString] - a[keyString]\r\n    );\r\n\r\n    const tradeVolumes = summaryDataSorted.map((row) => row[keyString]);\r\n\r\n    let countryNames = summaryDataSorted.map((row) => row.Partner);\r\n    countryNames = countryNames.map(\r\n      (el) => el.charAt(0).toUpperCase() + el.slice(1)\r\n    );\r\n\r\n    const colorObj = generateColorObj(tradeFlow, origin);\r\n\r\n    const blockScale = d3\r\n      .scaleLinear()\r\n      .domain([0, d3.max(tradeVolumes)])\r\n      .range([5, 40]);\r\n\r\n    d3.selectAll(\".block\")\r\n      .transition()\r\n      .duration(1000)\r\n      .attr(\"width\", (d) => {\r\n        return blockScale(d);\r\n      })\r\n      .attr(\"height\", (d) => {\r\n        return blockScale(d);\r\n      })\r\n      .attr(\"fill\", function (d, i) {\r\n        const currentBlock = d3.select(this);\r\n        let currentBlockID = currentBlock._groups[0][0].attributes.id.nodeValue;\r\n\r\n        const thisCountryName = currentBlockID.slice(0, -5);\r\n\r\n        let originForComparison = origin;\r\n\r\n        if (originForComparison === \"unitedKingdom\") {\r\n          originForComparison = \"UnitedKingdom\";\r\n        }\r\n\r\n        if (originForComparison === thisCountryName) {\r\n          return \"green\";\r\n        }\r\n\r\n        return colorObj[thisCountryName];\r\n      });\r\n  }\r\n\r\n  function generateColorObj(tradeFlow, origin) {\r\n    const tradePartnersFull = createTradeData(origin, tradeFlow);\r\n\r\n    const colorObj = colorByCountry(tradePartnersFull);\r\n    return colorObj;\r\n  }\r\n\r\n  function createTradeData(origin, tradeFlow) {\r\n    let tradePartnersFull =\r\n      tradeFlow === \"export\"\r\n        ? findTradePartnersExport(origin)\r\n        : findTradePartnersImport(origin);\r\n\r\n    return tradePartnersFull;\r\n  }\r\n\r\n  let titleText = \"Export Share\";\r\n\r\n  if (origin) {\r\n    titleText = ` ${origin}'s share of all EU ${\r\n      tradeFlow.charAt(0).toUpperCase() + tradeFlow.slice(1)\r\n    }s`;\r\n  }\r\n\r\n  return (\r\n    <div id=\"forceBlocksContainer\" style={{ maxHeight: \"200px\" }}>\r\n      <h3 id=\"forceBlocksTitle\">{titleText}</h3>\r\n      <svg id=\"blockSvg\" height={400}></svg>\r\n      <ForceBlocksTooltip\r\n        isHovering={isHovering}\r\n        tooltipStyles={tooltipStyles}\r\n        blockHovered={blockHovered}\r\n        tradeFlow={tradeFlow}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ForceBlocks;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nexport const Title = (props) => {\r\n  const { origin, tradeFlow } = props;\r\n\r\n  const [titleText, setTitleText] = useState(\"Please Select a Country\");\r\n\r\n  function returnTitleText(origin, tradeFlow) {\r\n    if (!origin) {\r\n      return \"Please Select a Country\";\r\n    }\r\n    let flowText;\r\n\r\n    if (tradeFlow === \"export\") {\r\n      flowText = \"Exports from\";\r\n    } else {\r\n      flowText = \"Imports to\";\r\n    }\r\n\r\n    return `${flowText} ${origin}`;\r\n  }\r\n\r\n  useEffect(() => {\r\n    setTitleText(returnTitleText(origin, tradeFlow));\r\n    console.log(origin, tradeFlow);\r\n  }, [tradeFlow, origin]);\r\n\r\n  return (\r\n    <div id=\"titleContainer\">\r\n      <h1>{titleText}</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Title;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport { drawArrowDirection } from \"./graphic/arrow\";\r\nimport CountrySelect from \"./controlPanel/countrySelect\";\r\nimport EuroMap from \"./graphic/europeMap\";\r\nimport clearArrowsAndCircles from \"./graphic/clearArrows\";\r\nimport {\r\n  findTradePartnersExport,\r\n  findTradePartnersImport,\r\n} from \"./mapDataPrep/findTradePartners\";\r\nimport calculateArrowWidth from \"./graphic/arrowWidths\";\r\nimport colorByCountry, { paintCountries } from \"./graphic/colorByCountry\";\r\nimport BarGraph from \"./graphic/BarGraph\";\r\nimport ForceBlocks from \"./graphic/forceBlocks\";\r\nimport countryList from \"./data/countryList\";\r\nimport Title from \"./graphic/Title\";\r\n\r\nconst Source = () => {\r\n  const [origin, setOrigin] = useState(\"\");\r\n  const [tradeFlow, setTradeFlow] = useState(\"export\");\r\n  const [nonEUCountry, setNonEUCountry] = useState(false);\r\n\r\n  const svg = d3.select(\"#europeMap\");\r\n\r\n  useEffect(() => {\r\n    d3.selectAll(\".countryPath\").attr(\"fill\", \"grey\");\r\n\r\n    if (origin) {\r\n      clearArrowsAndCircles();\r\n\r\n      const tradePartners =\r\n        tradeFlow === \"export\"\r\n          ? findTradePartnersExport(origin)\r\n          : findTradePartnersImport(origin);\r\n\r\n      const colorObj = colorByCountry(tradePartners);\r\n\r\n      paintCountries(colorObj, origin);\r\n\r\n      drawArrowDirection(svg, origin, tradePartners, tradeFlow);\r\n    }\r\n  }, [origin, tradeFlow]);\r\n\r\n  function handleOriginChange(e) {\r\n    const originSelected = e.target.value;\r\n\r\n    if (originSelected === \"United Kingdom\") {\r\n      setOrigin(\"unitedKingdom\");\r\n    } else {\r\n      setOrigin(originSelected);\r\n    }\r\n  }\r\n\r\n  function toggleEUSelected() {\r\n    setNonEUCountry(false);\r\n  }\r\n\r\n  function originChangeFromGraphic(countryName) {\r\n    console.log(countryName);\r\n\r\n    if (countryName === \"unitedKingdom\") {\r\n      setOrigin(countryName);\r\n    } else if (countryList.includes(countryName)) {\r\n      setOrigin(countryName);\r\n      setNonEUCountry(false);\r\n    } else {\r\n      setNonEUCountry(true);\r\n    }\r\n  }\r\n\r\n  function tradeFlowToImport() {\r\n    if (tradeFlow === \"export\") {\r\n      setTradeFlow(\"import\");\r\n    }\r\n  }\r\n\r\n  function tradeFlowToExport() {\r\n    if (tradeFlow === \"import\") {\r\n      setTradeFlow(\"export\");\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Title origin={origin} tradeFlow={tradeFlow} />\r\n\r\n      <div id=\"mapAndGraphContainer\">\r\n        <div id=\"graphContainer\">\r\n          <CountrySelect\r\n            handleOriginChange={handleOriginChange}\r\n            origin={origin}\r\n            tradeFlow={tradeFlow}\r\n            tradeFlowToExport={tradeFlowToExport}\r\n            tradeFlowToImport={tradeFlowToImport}\r\n          />\r\n          <BarGraph origin={origin} tradeFlow={tradeFlow} />\r\n          <ForceBlocks\r\n            origin={origin}\r\n            tradeFlow={tradeFlow}\r\n            originChangeFromGraphic={originChangeFromGraphic}\r\n          />\r\n        </div>\r\n        <div\r\n          id=\"mapContainer\"\r\n          style={{\r\n            maxWidth: \"1200px\",\r\n            minWidth: \"1200px\",\r\n          }}\r\n        >\r\n          <EuroMap\r\n            origin={origin}\r\n            originChangeFromGraphic={originChangeFromGraphic}\r\n            toggleEUSelected={toggleEUSelected}\r\n            nonEUCountry={nonEUCountry}\r\n          />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Source;\r\n","import \"./App.css\";\nimport Source from \"./Source\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Source />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}